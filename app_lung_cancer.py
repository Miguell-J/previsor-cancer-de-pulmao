import joblib as jb
import streamlit as st
import pandas as pd
import numpy as np
from streamlit.components.v1 import html
import matplotlib.pyplot as plt
import os

model_path = os.path.join(os.path.dirname(__file__), 'LogisticRegressor.joblib')
model = jb.load(model_path)


image_url = "https://www.bhtorax.com.br/wp-content/uploads/2021/01/O-que-e-o-cancer-de-pulmao_-Foto-5.jpg"
st.image(image_url, caption='Previsor de C√¢ncer de Pulm√£o', use_column_width=True)


st.write("""
# Previsor de C√¢ncer de Pulm√£o ü´Å

Este site consegue prever a exist√™ncia de **c√¢ncer de pulm√£o** com base em dados m√©dicos e algor√≠timos de intelig√™ncia artificial
""")

st.sidebar.header("Informa√ß√µes M√©dicas")

st.sidebar.subheader("Insira os dados correspondentes √†s suas caracter√≠sticas m√©dicas:")


gender = st.sidebar.selectbox("G√™nero", ["Masculino", "Feminino"])
age = st.sidebar.slider("Idade", 18, 100, 40)
smoking = st.sidebar.selectbox("Fumante", ["Sim", "N√£o"])
yellow_fingers = st.sidebar.selectbox("Dedos Amarelados", ["Sim", "N√£o"])
anxiety = st.sidebar.selectbox("Ansiedade", ["Sim", "N√£o"])
peer_pressure = st.sidebar.selectbox("Press√£o alta", ["Sim", "N√£o"])
chronic_disease = st.sidebar.selectbox("Doen√ßa Cr√¥nica", ["Sim", "N√£o"])
fatigue = st.sidebar.selectbox("Fadiga", ["Sim", "N√£o"])
allergy = st.sidebar.selectbox("Alergia", ["Sim", "N√£o"])
wheezing = st.sidebar.selectbox("Chiado no peito", ["Sim", "N√£o"])
alcohol_consuming = st.sidebar.selectbox("Consumo de √Ålcool", ["Sim", "N√£o"])
coughing = st.sidebar.selectbox("Tosse", ["Sim", "N√£o"])
shortness_of_breath = st.sidebar.selectbox("Falta de Ar", ["Sim", "N√£o"])
swallowing_difficulty = st.sidebar.selectbox("Dificuldade ao Engolir", ["Sim", "N√£o"])
chest_pain = st.sidebar.selectbox("Dor no Peito", ["Sim", "N√£o"])

# Create a DataFrame with user input
user_data = pd.DataFrame({
    'G√™nero': [1 if gender == 'Masculino' else 0],
    'Idade': [age],
    'Fumante': [1 if smoking == 'Sim' else 0],
    'Dedos Amarelados': [1 if yellow_fingers == 'Sim' else 0],
    'Ansiedade': [1 if anxiety == 'Sim' else 0],
    'Press√£o Alta': [1 if peer_pressure == 'Sim' else 0],
    'Doen√ßa Cr√¥nica': [1 if chronic_disease == 'Sim' else 0],
    'Fadiga ': [1 if fatigue == 'Sim' else 0],
    'Alergia ': [1 if allergy == 'Sim' else 0],
    'Chiado no peito': [1 if wheezing == 'Sim' else 0],
    'Consumo de √Ålcool': [1 if alcohol_consuming == 'Sim' else 0],
    'Tosse': [1 if coughing == 'Sim' else 0],
    'Falta de Ar': [1 if shortness_of_breath == 'Sim' else 0],
    'Dificuldade ao Engolir': [1 if swallowing_difficulty == 'Sim' else 0],
    'Dor no Peito': [1 if chest_pain == 'Sim' else 0]
})


prediction_proba = model.predict_proba(user_data)[:, 1]
prediction = model.predict(user_data)[0]
    
if st.button("Prever"):
    st.subheader("Resultado da Previs√£o:")
    if prediction == 1:
        st.error("‚ö†Ô∏è Voc√™ tem uma alta probabilidade de ter c√¢ncer de pulm√£o!")
    else:
        st.success("ü©∫ Voc√™ tem uma baixa probabilidade de ter c√¢ncer de pulm√£o!")

    st.subheader("Probabilidade:")
    st.write(f"A probabilidade do usu√°rio ter a doen√ßa √© de: {prediction_proba[0]:.2%}")

    st.subheader("Rela√ß√£o entre Dados M√©dicos e o Resultado da Previs√£o:")
    fig, ax = plt.subplots()
    ax.pie(user_data.iloc[0], labels=user_data.columns, autopct='%1.1f%%', startangle=90)
    ax.axis('equal')
    st.pyplot(fig)
    pass

st.markdown("---")
st.markdown("Criado por Miguel Julio üöÄ")
